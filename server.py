import datetime
import random
import smtplib
import pandas
from flask import Flask, render_template, redirect, url_for, flash, request, abort
from flask_bootstrap import Bootstrap
from flask_ckeditor import CKEditor
from werkzeug.security import generate_password_hash, check_password_hash
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin, login_user, LoginManager, login_required, current_user, logout_user
from flask_wtf import FlaskForm
from sqlalchemy.orm import relationship
from wtforms import StringField, SubmitField, PasswordField
from wtforms.fields.html5 import EmailField
from wtforms.validators import DataRequired
from functools import wraps
import os
import json

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get("SECRET_KEY")
ckeditor = CKEditor(app)
Bootstrap(app)

app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get("DATABASE_URL", "sqlite:///sena-base.db")
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

admin = False
login_manager = LoginManager()
login_manager.init_app(app)

MY_EMAIL = os.environ.get("MY_EMAIL")
SENA_EMAIL = 'sivagangainagarajan@gmail.com'
MY_PASSWORD = os.environ.get("MY_PASSWORD")


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


def admin_only(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # If id is not 1 then return abort with 403 error
        if current_user.user_id != 1:
            return abort(403)
        # Otherwise continue with the route function
        return f(*args, **kwargs)

    return decorated_function


class User(UserMixin, db.Model):
    __tablename__ = "User"
    user_id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(100), unique=True)
    password = db.Column(db.String(100))
    username = db.Column(db.String(100))
    # test = relationship("Test15", back_populates="test_author")
    # test16 = relationship("Test16", back_populates="test_author")
    # test17 = relationship("Test17", back_populates="test_author")
    # test18 = relationship("Test18", back_populates="test_author")
    test19 = relationship("Test19", back_populates="test_author")
    test20 = relationship("Test20", back_populates="test_author")
    test21 = relationship("Test21", back_populates="test_author")
    test22 = relationship("Test22", back_populates="test_author")

    def get_id(self):
        return self.user_id


# class Test15(db.Model):
#     __tablename__ = "Test_15"
#     user_id = db.Column(db.Integer, primary_key=True)
#     examinee_id = db.Column(db.Integer, db.ForeignKey("User.user_id"))
#     test_author = relationship("User", back_populates="test")
#     marks = db.Column(db.Integer)
#     user_answers = db.Column(db.String())
#     final_result = db.Column(db.String())
#     date = db.Column(db.String(250), nullable=False)


# class Test16(db.Model):
#     __tablename__ = "Test_16"
#     user_id = db.Column(db.Integer, primary_key=True)
#     examinee_id = db.Column(db.Integer, db.ForeignKey("User.user_id"))
#     test_author = relationship("User", back_populates="test16")
#     marks = db.Column(db.Integer)
#     examinee_name = db.Column(db.String())
#     user_answers = db.Column(db.String())
#     final_result = db.Column(db.String())
#     date = db.Column(db.String(250), nullable=False)


# class Test17(db.Model):
#     __tablename__ = "Test_17"
#     user_id = db.Column(db.Integer, primary_key=True)
#     examinee_id = db.Column(db.Integer, db.ForeignKey("User.user_id"))
#     test_author = relationship("User", back_populates="test17")
#     marks = db.Column(db.Integer)
#     examinee_name = db.Column(db.String())
#     user_answers = db.Column(db.String())
#     final_result = db.Column(db.String())
#     date = db.Column(db.String(250), nullable=False)


# class Test18(db.Model):
#     __tablename__ = "Test_18"
#     user_id = db.Column(db.Integer, primary_key=True)
#     examinee_id = db.Column(db.Integer, db.ForeignKey("User.user_id"))
#     test_author = relationship("User", back_populates="test18")
#     marks = db.Column(db.Integer)
#     examinee_name = db.Column(db.String())
#     user_answers = db.Column(db.String())
#     final_result = db.Column(db.String())
#     date = db.Column(db.String(250), nullable=False)


class Test19(db.Model):
    __tablename__ = "Test_19"
    user_id = db.Column(db.Integer, primary_key=True)
    examinee_id = db.Column(db.Integer, db.ForeignKey("User.user_id"))
    test_author = relationship("User", back_populates="test19")
    marks = db.Column(db.Integer)
    examinee_name = db.Column(db.String())
    user_answers = db.Column(db.String())
    final_result = db.Column(db.String())
    date = db.Column(db.String(250), nullable=False)


class Test20(db.Model):
    __tablename__ = "Test_20"
    user_id = db.Column(db.Integer, primary_key=True)
    examinee_id = db.Column(db.Integer, db.ForeignKey("User.user_id"))
    test_author = relationship("User", back_populates="test20")
    marks = db.Column(db.Integer)
    examinee_name = db.Column(db.String())
    user_answers = db.Column(db.String())
    final_result = db.Column(db.String())
    date = db.Column(db.String(250), nullable=False)


class Test21(db.Model):
    __tablename__ = "Test_21"
    user_id = db.Column(db.Integer, primary_key=True)
    examinee_id = db.Column(db.Integer, db.ForeignKey("User.user_id"))
    test_author = relationship("User", back_populates="test21")
    marks = db.Column(db.Integer)
    examinee_name = db.Column(db.String())
    user_answers = db.Column(db.String())
    final_result = db.Column(db.String())
    date = db.Column(db.String(250), nullable=False)


class Test22(db.Model):
    __tablename__ = "Test_22"
    user_id = db.Column(db.Integer, primary_key=True)
    examinee_id = db.Column(db.Integer, db.ForeignKey("User.user_id"))
    test_author = relationship("User", back_populates="test22")
    marks = db.Column(db.Integer)
    examinee_name = db.Column(db.String())
    user_answers = db.Column(db.String())
    final_result = db.Column(db.String())
    date = db.Column(db.String(250), nullable=False)


class Admission(db.Model):
    __tablename__ = "New_Admission"
    user_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    mobile_number = db.Column(db.Integer)
    email = db.Column(db.String(100), unique=True)


db.create_all()
db.session.commit()


class RegisterForm(FlaskForm):
    name = StringField('Name*', validators=[DataRequired()])
    email = EmailField('Email*', validators=[DataRequired(message='Enter a valid email-id')])
    password = PasswordField('Password*', validators=[DataRequired()])
    submit = SubmitField('Register')


class LoginForm(FlaskForm):
    email = StringField('Email*', validators=[DataRequired(message='Enter a valid email-id')])
    password = PasswordField('Password*', validators=[DataRequired()])
    submit = SubmitField('Login')


class AdmissionForm(FlaskForm):
    name = StringField('Name*', validators=[DataRequired()])
    number = StringField("Phone*", validators=[DataRequired()])
    email = EmailField('Email*', validators=[DataRequired(message='Enter a valid email-id')])
    submit = SubmitField('Submit')


class ChangeDetails(FlaskForm):
    email = StringField('Email*', validators=[DataRequired(message='Enter a valid email-id')])
    old_password = PasswordField('Old Password*', validators=[DataRequired()])
    new_password = PasswordField('New Password*', validators=[DataRequired()])
    submit = SubmitField('Submit')


student_mails = {
    "mgopalakrish''075@gmail.com": ["Gopal", 2000],
    "nivir6558@gmail.com": ["Nivetha", 7000],
    "jaya26jj@gmail.com": ["Christy", 5000],
    "srjamuna1003@gmail.com": ["jamuna", 7000],
    "satheshpandian1997@gmail.com": ["Satheshpandian", 4000],
    "lakshmiraja412@gmail.com": ["Rajalaskhmi", 5000],
    "tamilarasanbe9597@gmail.com": ["Anitha", 1000],
    "rajeshkan''6341@gmail.com": ["Rajesh kan''", 3000],
    "jaishreeramgp@gmail.com": ["Yogapriya", 3000],
    "irudhayasubiksha2001@gmail.com": ["Subiksha", 0],
    "abinayaabi257@gmail.com": ["Abi", 1000],
    "shanthirasu1991@gmail.com": ["Shanthi", 0],
    "pradee1296@gmail.com": ["Pradeepa", 5000],
    "jeniferj0204@gmail.com": ["Janifer", 7000],
    "krish47457@gmail.com": ["Krishna", 0],
    "naveenaryan440@gmail.com": ["Naveen", 0],
    "veerasurya250899@gmail.com": ["Suriya", 3000],
    "amin2svg@gmail.com": ["Amin", 3000],
    "jjprincy06@gmail.com": ["Jeba Josepin Princy", 0],
    "jancybetsia20@gmail.com": ["Jancy", 0],
    "cottonpanju9@gmail.com": ["Panju", 2000],
    "rameswariv1999@gmail.com": ["Rameshwari", 2000],
    "vimaladharmar2002@gmail.com": ["Vimala", 1000],
    "devahi1993@gmail.com": ["Devahi", 0],
    "sarojiniganesan96@gmail.com": ["Sarojini", 0],
    "gangadha91@gmail.com": ["Gangadharan", 0],
    "krish''nk498@gmail.com": ["Kamatchi", 0],
    "indhuindhumathi141@gmail.com": ["Indhumathi", 4000],
    "jamespurysh@gmail.com": ["Purushothaman", 0],
    "sivagangainagarajan@gmail.com": ["Nagarajan", 0],
    "matheshsethu22@gmail.com": ["Mathesh", 4000],
    "nagarajnkarthika@gmail.com": ["Karthika", 2000],
    "keviraj482@gmail.com": ["Yogesh", 2000],
    "christyjeslina98@gmail.com": ["Christy", 3500],
    "valarmathi9415@gmail.com": ["Valarmathi", 2000],
}

verified_emails = [mail.strip() for mail in student_mails.keys()]

exam_sites = {

    "15": ["June 14, 2021 10:00:00", "June 14, 2021 13:30:00"],
    "16": ["June 21, 2021 10:00:00", "June 21, 2021 13:30:00"],
    "17": ["June 28, 2021 10:00:00", "June 28, 2021 22:30:00"],
    "18": ["July 05, 2021 10:00:00", "July 05, 2021 13:30:00"],
    "19": ["July 12, 2021 10:00:00", "July 12, 2021 13:30:00"],
    "20": ["July 19, 2021 10:00:00", "July 19, 2021 14:00:00"],
    "21": ["July 26, 2021 10:00:00", "July 26, 2021 14:00:00"],
    "22": ["August 02, 2021 11:00:00", "August 02, 2021 14:00:00"],

}

sl_no = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
         59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
         87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
         112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
         134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
         156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
         178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]

ques = ['எது நீதிக்கட்சியின் முன்னோடியாகும்?\n', 'சென்னை ஐக்கிய கழகம் எந்த ஆண்டு சென்னை திராவிடர் சங்கம் என்று பெயர் மாற்றம் பெற்றது??\n',
        'சென்னை திராவிடர் சங்கம் வளர்வதற்கு முக்கிய பங்காற்றியவர்??\n', 'தென்னிந்திய நல உரிமை சங்கம் '
                                                                        'தோற்றுவிக்கப்பட்ட ஆண்டு??\n', 'தென்னிந்திய '
                                                                                                       'நல உரிமைச் '
                                                                                                       'சங்கம் உருவாக '
                                                                                                       'காரணமாக '
                                                                                                       'இருந்தவர்கள்??\n', 'தென்னிந்திய நல உரிமைச் சங்கம் என்ற பெயரில் ஒரு ஆங்கில மொழி செய்தித்தாளை நடத்தி வந்தது இதனால் இந்த அமைப்பு நீதிக்கட்சி என்று அழைக்கப்பட்டது??\n\n', 'நீதிக்கட்சியில் ஆதரித்த தமிழ் பத்திரிக்கை??\n', 'மாண்டேகு செம்ஸ்போர்டு சீர்திருத்தங்களில் அடிப்படையில் எந்த ஆண்டு தேர்தலில் வெற்றிபெற்று நீதிக்கட்சி ஆட்சிக்கு வந்தது??\n', 'சென்னை சட்டசபையில் 98 இடங்களில் எத்தனை இடங்களில் நீதி கட்சி வெற்றி பெற்றது??\n', '1920இல் பிட்டி தியாகராய செட்டி அமைச்சரவைக்கு தலைமை ஏற்க மறுத்துவிட்டதால் யார் தலைமையிலான அமைச்சரவை பதவி ஏற்றது??\n', 'எந்த ஆண்டு காங்கிரஸ் கட்சி வெற்றி பெற்றது ஆனால் ஆட்சி அமைக்க வில்லை??\n', 'நீதிக்கட்சி மொத்தம் எத்தனை ஆண்டுகள் ஆட்சியில் இருந்தது??\n', 'பிராமணர் அல்லாதவர்களுக்கு உள்ளாட்சி அமைப்பு மற்றும் கல்வி நிறுவனங்களில்_____&______ ஆம் ஆண்டு இட ஒதுக்கீடு அரசாணைகள் கொண்டு வரப்பட்டது??\n\n', 'பணியாளர் தேர்வு கழகம் உருவாக்கப்பட்ட ஆண்டு?\n', '“பணியாளர் தேர்வு கழகம்” பணியாளர் தேர்வாணையம் ஆக மாற்றப்பட்ட ஆண்டு??\n', 'எந்த ஆண்டில் இந்து அறநிலையச் சட்டம் நிறைவேற்றப்பட்டு பிராமணரல்லாதோர் அர்ச்சகர்களாக கோவில்களில் பணி அமர்த்தப்பட்டனர்???\n', 'இந்து சமய அறநிலையச் சட்டம் கொண்டுவரப்பட்ட ஆண்டு??\n', 'பெண்களுக்கு வாக்குரிமை வழங்கப்பட்ட ஆண்டு??\n', 'சென்னை அரசாங்க தொழிற்சாலைகள் உதவி சட்டம் கொண்டுவரப்பட்ட ஆண்டு?\n\n', 'ஆந்திரா பல்கலைக்கழகம் உருவாக்கப்பட்ட ஆண்டு??\n', 'அண்ணாமலை பல்கலைக்கழகம் நிறுவப்பட்ட ஆண்டு??\n', '----ஆண்டு நடைபெற்ற தேர்தலில் நீதிக்கட்சி பெரும் தோல்வியடைந்தது???\n', 'எந்த ஆண்டு இந்திய அரசு சட்டப்படி மாநில சுயாட்சி அறிமுகப்படுத்தப்பட்டது??\n', '1937 ஆம் ஆண்டு நடைபெற்ற சட்டமன்ற தேர்தலில் காங்கிரஸ் கட்சி 215 இடங்களில் எத்தனை இடங்கள் வெற்றி பெற்றது???\n\n', 'காங்கிரஸ் கட்சி சட்ட மேலவையில் 46 இடங்களில் எத்தனை இடங்கள் வெற்றி பெற்றது??\n', ' ----- ஆண்டில் சி ராஜகோபாலச்சாரி தலைமையிலான காங்கிரஸ் அமைச்சரவை பதவி ஏற்றது???\n', 'சென்னை ஆயிரம் விளக்கு பகுதியில் யாரால் இலவச மதிய உணவுத் திட்டம் அறிமுகப்படுத்தப்பட்டது???\n', '1944 ஆம் ஆண்டு ---- இல் நடைபெற்ற நீதிக்கட்சி மாநாட்டில் பேரறிஞர் அண்ணா கொண்டுவந்த தீர்மானங்கள் படி நீதிக்கட்சி திராவிட கழகம் என பெயர் மாற்றம் செய்யப்பட்டது???\n', 'அடுத்தது இராமலிங்க சுவாமிகள் இராமலிங்க அடிகள் எவ்வாறு பிரபலமாக அறியப்பட்டார்??\n', 'இராமலிங்க அடிகளின் வாழ்நாள் காலம்?\n', 'இராமலிங்க அடிகளார் சிதம்பரத்திற்கு அருகே எந்த ஊரில் பிறந்தார்??\n\n', 'தந்தையின் மறைவுக்குப் பின்னர் ராமலிங்க அடிகளின் குடும்பம் எங்கிருந்து அவருடைய சகோதரி இல்லத்திற்கு குடிபெயர்ந்தது.\n', 'இராமலிங்க அடிகளை பற்றிய பின்வரும் கூற்றுகளில் சரியானது எது?\n', 'வள்ளலார் சமரச வேத சன்மார்க்க சங்கம் எனும் அமைப்பை நிறுவிய ஆண்டு??\n', 'சமரச வேத சன்மார்க்க சங்கம் பின்னாளில் எவ்வாறு பெயர் மாற்றம் செய்யப்பட்டது??\n\n', 'தன்னைப் பின்பற்றுவோர் ஒருங்கிணைப்பதற்கான ராமலிங்க அடிகளார் நிறுவிய சபை??\n', 'வள்ளலாரின் பாடல்கள் இயர் தலைப்பில் தொகுக்கப்பட்டன?\n', 'ராமலிங்க அடிகளாரின் சீடர்கள் திருவருட்பாவில் வெளியிட்ட ஆண்டு எது??\n\n', 'வள்ளலாரின் தீவிரமான சிந்தனைகள் பழமைவாத சைவர்களை ஆழமாக படுத்தியதால் அவர்கள் வள்ளலாரின் பாடல்களை----- என கண்டனம் செய்தனர் செய்தனர்??\n', 'முடிசூடும் பெருமாள் என்ற இயற்பெயர் கொண்டவர் யார்??\n', 'வைகுண்ட சுவாமிகள் வாழ்ந்த காலம் என்ன??\n', 'வைகுண்ட சுவாமிகளைப் பற்றிய வாக்கியங்களில் தவறானது எது?\n', 'வைகுண்ட சுவாமிகள் யாருடைய ஆட்சியை கருப்புப் பிசாசுகளின் ஆட்சி என்று விமர்சித்து விமர்சித்தார்?\n', ' வைகுண்ட சுவாமிகள் பற்றிய வாக்கியங்களில் சரியானதை தேர்ந்தெடு?\n', 'எந்தக் கடவுள் தன்னை மகனாக பாவித்து மறுபிறவி அழைத்ததாக வைகுண்ட சுவாமிகள் அறிவித்தார்?\n', 'கூற்று: வைகுண்டர் தெற்கு திருவிதாங்கூரின் ஒடுக்கப்பட்ட மக்களை காலணி அணியும் படி கூறினார்\nகாரணம்: தெற்கு திருவிதாங்கூரில் ஒடுக்கப்பட்ட மக்கள் எதை அணியலாம் எதை அணியக் கூடாது என்று கட்டுப்பாடு எதிர்க்கும் வகையில் வைகுண்டர் அவ்வாறு செய்தார்.\n', 'பின்வரும் கூற்றுகளில் தவறானது எது\n', 'பல்வேறு சாதனைகளை சேர்ந்த மக்களே ஒருங்கிணைப்பதற்கு வைகுண்ட சுவாமிகள் நிறுவிய அமைப்பு எது??\n\n', 'அந்த ஸ்வாமிகளை பின்பற்றியவர்கள் அவரை மிக்க மரியாதையுடன் எவ்வாறு அழைத்தனர்??\n', 'வைகுண்ட சுவாமிகள் உடைய சமய வழிபாட்டு முறை எவ்வாறு தலைப்பு இடப்பட்டது??\n', 'வைகுண்ட சுவாமி வழிபாட்டு முறையை கைவிடும்படி தன்னைப் பின்பற்றுவோர் இடம் கூறினார்??\n\n', 'வைகுண்ட சுவாமிகள் உருவாக்கிய சாதியக் கட்டுப்பாடுகள் உடைக்கப்பட்ட உணவுக் கூடங்கள் எவ்வாறு அழைக்கப்பட்டன?\n', '1867இல் சீவக சிந்தாமணி 1898இல் மணிமேகலை ஆகிய இரண்டும் முழுமையாக அச்சிடப்பட்டு வெளியிடப்பட்ட பின்னணியில் மிக முக்கியமான ஆளுமையாக இருந்தவர் யார்?\n\n', 'பண்டித அயோத்திதாசர் ஆற்றிய சமூக பணிகளில் சேராதது எது??\n\n', 'பண்டித அயோத்திதாசர் இன் வாழ்நாள் காலம் என்ன??\n', 'அயோத்திதாசர் பிறந்த ஊர்?\n', 'அயோத்திதாசர் புலமை பெற்ற மொழிகளில் சேராதது எது??\n', 'அயோத்திதாசர் பற்றிய கூற்றுகளில் தவறானது தேர்ந்தெடுக்க\n', 'ஒடுக்கப்பட்டோரின் கோவில் நுழைவுக்கு ஆதரவாக குரல் எழுப்புவதற்காக பண்டிதர் அயோத்திதாசர் நிறுவிய அமைப்பு எது?\n\n', ' திராவிட கழகம் என்னும் அமைப்பை 1882ல் நிறுவியவர் யார்?\n\n', 'அயோத்திதாசர் திராவிட பாண்டியன் என்னும் இதழைத் தொடங்கி ஆண்டு எது?\n', 'அயோத்திதாசர் திராவிட மகாஜன சபை எந்த ஆண்டு\nநிறுவினார்??\n\n', 'திராவிட மகாஜன சபையின் முதல் மாநாடு நடைபெற்ற இடம் எது??\n\n', '1907இல் அயோத்திதாசர் தொடங்கிய வாராந்திர பத்திரிக்கை எது??\n\n', 'அயோத்திதாசர் இலங்கை சென்று பௌத்தத்தைத் தழுவிய ஆண்டு என்ன??\n\n', 'பவுத்த மதத்தின் வழியே பகுத்தறிவின் அடிப்படையிலான சமத்துவத்தை கட்டமைப்பதற்கான அயோத்திதாசர் ______ என்னும் அமைப்பை நிறுவினார்??\n\n', 'அயோத்திதாசர் சாக்கிய பௌத்த சங்கத்தை எங்கு நிறுவினார்??\n\n\n', 'சி என் அண்ணாதுரை பிறந்த ஆண்டு?\n\n', 'அண்ணா MA பட்டத்தை எந்த கல்லூரியில் முடித்தார்??\n', ' அண்ணா எந்த கட்சியின் வாயிலாக அரசியலில் நுழைந்தார்??\n\n', 'அண்ணா----- இல் பெரியாரால் துவக்கப்பட்ட இந்தி எதிர்ப்பு மாநாட்டில் கலந்துகொண்டு இந்தி மொழிக்கு எதிராக குரல் எழுப்பினர்??\n\n', '1944 ஆம் ஆண்டு சேலத்தில் நடைபெற்ற மாநாட்டில் நீதிக்கட்சியின் பெயரைத் திராவிடர் கழகம் என மாற்றம் செய்ய தீர்மானம் கொண்டு வந்தவர்??\n', 'அண்ணா திராவிட முன்னேற்ற கழகம் என்ற புதிய கட்சியைத் தொடங்கிய ஆண்டு??\n', 'எந்த ஆண்டு நடைபெற்ற தேர்தலில் வெற்றி பெற்று அண்ணா தமிழக முதலமைச்சராக பொறுப்பேற்றார்??\n', 'ஒரு ரூபாய்க்கு ஒரு படி அரிசி என்ற திட்டத்தை அறிமுகப்படுத்தியவர்?\n', 'அரசமைப்பு என்ற கொள்கை முதன் முதலில் தோன்றிய நாடு எது?', 'ஒரு சமூகத்தின் அடிப்படை தன்மையையும் அரசாட்சிக்காண கொள்கையையும் விளக்குவது எது?', 'இந்திய அரசியலமைப்புக்கான தேவையை முதல் முதலில் வலியுறுத்திய அறிக்கை', 'இந்தியாவிற்கான அரசியலமைப்பு சுதந்திரத்திற்கு வழிவகை செய்யும் என்ற காரணத்தால் அரசியலமைப்பை உருவாக்க முதன்முதலில் முன்மொழிந்த நபர்?', 'இந்திய அரசியலமைப்பு அடிப்படைத் தேவை என்ற கொள்கை பரவலாக்கப்பட்ட வருடம்', 'காங்கிரஸ் அரசியலமைப்பை அமைப்பதற்கான வேண்டுதலை வலியுறுத்தும் வகையில் தீர்மானம் நிறைவேற்றிய வருடம்', 'எதன் அடிப்படையில் அரசியல் அமைப்பை அமைக்க வேண்டும் என நேரு வரையறுத்தார்?', 'அரசியல் நிர்ணய சபையை அமைப்பதற்கான நேருவின் வரையறை வெளியான வருடம்', 'ஆங்கில அரசால் ஆகஸ்ட் சலுகை வழங்கப்பட்ட வருடம்', 'இரண்டாம் உலகப் போரின் போது இந்திய வைஸ்ராய் ஆக தலையேற்று இருந்தவர்', 'கிரிப்ஸ் குழு இந்தியா வந்தடைந்த வருடம்?', 'கிரிப்ஸ் குழுவின் முக்கிய நோக்கம்', 'வேவல் திட்டம் வருடம்', 'ராஜாஜி திட்டத்தின் வருடம்', 'அரசியல் சாசன நிர்ணய சபையை அமைப்பதற்கு இந்தியா வந்தடைந்த குழு', 'அரசியல் சாசன நிர்ணய சபை வரையறுக்கப்பட்ட வழிமுறைகளின் மூலம் ஒருங்கிணைக்கப்பட்டது எப்போது?', 'அரசியல் சாசன நிர்ணய சபையின் வரையறுக்கப்பட்ட மொத்த உறுப்பினர்களின் எண்ணிக்கை', 'சுதேச அரசுகளுக்கு ஒதுக்கப்பட்ட உறுப்பினர்களின் எண்ணிக்கை', 'அரசியல் சாசன நிர்ணய சபை உறுப்பினர்கள் தேர்ந்தெடுக்கப்பட்ட வழிமுறை', 'நிர்ணய சபை உறுப்பினர்களின் இட ஒதுக்கீட்டு பிரிவினைகள் என்ன?', 'நிர்ணய சபை உறுப்பினர் எண்ணிக்கையில் காங்கிரஸ் மற்றும் முஸ்லிம் லீக் வென்ற இடங்களின் எண்ணிக்கை', 'இந்திய அரசியல் சாசன நிர்ணய சபையில் தேர்ந்தெடுக்கப்பட்ட பெண்களின் எண்ணிக்கை', 'முதல் கூட்டத் தொடர் நடைபெற்ற நாள்', 'தற்காலிக தலைவராக பொறுப்பேற்ற தலைவர்', 'நிரந்தர தலைவர்', 'முதல் நிர்ணய சபை கூட்டத்தை புறக்கணித்த கட்சி', 'குறிக்கோள் தீர்மானத்தை இயற்றியவர்', 'குறிக்கோள் தீர்மானம் இயற்றப்பட்ட நாள்', 'குறிக்கோள் தீர்மானம் நிர்ணய சபையால் எப்போது ஏற்றுக்கொள்ளப்பட்டது', 'மாகாண குழுவின் தலைவராக பொறுப்பேற்ற தலைவர்', 'அரசியல் சாசன வரைவு குழுவின் முதல் கூட்டம்', 'வரைவுக் குழுவின் தலைவராக தேர்ந்தெடுக்கப் பட்டவர்', 'டிபி கைத்தானுக்கு பதில் வரைவுக் குழுவில் பொறுப்பேற்றவர்', 'அரசியல் சாசன நிர்ணய சபையின் சின்னம்', 'அரசியல் சாசன நிர்ணய சபையில் எத்தனை முதன்மை குழுக்கள் அமைக்கப்பட்டன ?', 'மவுண்ட்பேட்டன் திட்டம்', 'பிரிவினைக்குப் பின் இந்திய நிர்ணய சபையின் எண்ணிக்கை', 'இந்தியா காமன்வெல்த் நாடுகளின் பட்டியலில் இணைந்த வருடம்', 'மூவர்ண கொடி தேசிய கொடியாக அங்கீகரிக்கப்பட்ட வருடம்', 'வந்தே மாதரம் என்ற தேசிய பாடல் எந்த புதினத்தில் இருந்து எடுத்துக்கொள்ளப்பட்டது', 'நிர்ணய சபையின் கடைசிக் கூட்டம் நடைபெற்ற நாள்', 'சட்ட நாள்', 'பூர்ண சுயராஜ்ய நாள் காங்கிரஸால் எப்பொழுது முடிவு செய்யப்பட்டது (லாகூர்)', 'அரசியல் சாசன நிர்ணய சபை எத்தனை கூட்டத் தொடர்களை நிகழ்த்தியது', 'எத்தனை சட்டத்திருத்தங்கள் நிர்ணய சபையில் விவாதிக்கப்பட்டன?', 'முதன்மை வரைவு குழு உறுப்பினராக பொறுப்பேற்றவர்', 'அரசியல் சாசனத்தின் ஹிந்தி எழுத்து வடிவம் யாரால் எழுதப்பட்டது?', 'வரைவு குழுவை சறுக்கும் குழு என்று விமர்சித்தவர்', 'நிர்ணய சபை இந்துக்களால் நிரம்பி உள்ளது என விமர்சித்தவர்', 'நிர்ணய சபைக் கூட்டத்தின் மொத்த கால அளவு', 'இவர்களுள் அமைச்சரவை தூதுக்குழுவில் செயல்படாதவர் யார்?', 'இவற்றுள் எது அரசியல் சாசனத்தின் சிறப்பியல்பாக கருதப்படாதது ?', 'இந்திய அரசியல் சாசனத்தில் அடிப்படை உரிமைகள் எங்கிருந்து எடுத்துக்கொள்ளப்பட்டன', 'இந்திய அரசியல் சாசனம் எத்தனை வகையான அடிப்படை உரிமைகளை வரையறுக்கிறது ?', 'அடிப்படை உரிமைகள் எந்தப் பகுதியின் கீழ் அமைந்துள்ளது', 'சட்டத்தின் முன் அனைவரும் சமம் என்று கூறக்கூடிய பிரிவு', 'பிரிவு 15 எதை முன்வைக்கிறது', 'பிரிவு 15 கீழே கொடுக்கப்பட்டுள்ள எதன் அடிப்படையில் தாழ்த்துதல் கூடாது என்று வரையறுக்கவில்லை', 'அடிப்படை உரிமைகளை பாதிக்கும் எந்த சட்டமும் செல்லாது என்று கூறும் பிரிவு', 'அடிப்படை உரிமைகள் சார்ந்த சட்ட தீர்வு நேரடியாக எங்கு பெறலாம்', 'அடிப்படை உரிமைகளை உறுதிப்படுத்தும் விதமாக உயர்நீதிமன்றத்திற்கு சாசனம் வழங்கியுள்ள பேராணைகள் எத்தனை?', 'மதங்கள் சார்ந்த நம்பிக்கையும் பரப்புதலையும் எந்த பிரிவு உறுதி செய்கிறது?', 'குற்றவாளிகளுக்கான அடிப்படை உரிமைகளை உறுதி செய்யும் பிரிவு', 'பிரிவு 24 எந்த வயதுக்குட்பட்ட குழந்தைகளை வேலையில் அமர்த்துவதை தவிர்ப்பதற்காக நிறுவப்பட்டது', '21A எந்த சட்டத் திருத்தத்தின் மூலம் அடிப்படை உரிமைகளுடன் இணைக்கப்பட்டது', 'இவற்றுள் எந்தப் பிரிவு அவசர காலங்களிலும் கடைபிடிக்க வேண்டிய அவசியத்தை கொண்டுள்ளது?', 'தீண்டாமை ஒழிப்பிற்கான பிரிவு', 'பேராணைகளை உச்சநீதிமன்றம் செயல்படுத்துவதற்கான அதிகாரத்தை எந்தப் பிரிவு வழங்குகிறது ?', 'சத்யமேவ ஜயதே என்பதற்கான பொருள்', 'இந்திய தேசியக் கொடியை வடிவமைத்த பிங்கலி வெங்கைய்யா எந்த பகுதியை சேர்ந்தவர்?', 'கொடிகாத்த குமரன் என்று அழைக்கப்பட்ட திருப்பூர் குமரன் ஈரோடு மாவட்டத்தில் எங்கு பிறந்தார்?', 'தமிழக மாநில விலங்கு', 'இந்திய ரூபாய் சின்னத்தை வடிவமைத்தவர்', 'லாக்டோபாசிலஸ் தேசிய நுண்ணுயிர் ஆக கருதப்படும் இது இவ்வகையைச் சேர்ந்தது', 'காந்தியின் பிறந்த நாளான அக்டோபர் 2 சர்வதேச அகிம்சை நாளாக ஐநா எந்த ஆண்டிலிருந்து அங்கீகரித்து வருகிறது?', 'மின்னணு வணிக நிறுவனங்களுக்கு சமமான வரி விதிப்பதற்கு இந்தியாவுக்கு எதிராக பதிலடி கொடுக்கும் வர்த்தக நடவடிக்கையை முன்மொழிந்துள்ள நாடு எது', 'அண்மைச் செய்திகளில் இடம் பெற்ற “HEAL-COVID”என்ற நாடு தழுவிய சோதனையை செயல்படுத்தப்படவுள்ள நாடு எது', 'அண்மைச் செய்திகளில் இடம் பெற்ற கமலேஷ் சக்கரவர்த்தி என்பவர் யார்', 'ஓய்வுபெற்ற போர்க்குணம் உள்ள நாய்களை “சிகிச்சை நாய்களாக” நியமிக்க முடிவு செய்துள்ள ஆயுதப்படை எது', 'இந்தோ- தென்கொரியா நட்பு பூங்கா கட்டப்பட்டுள்ள இடம் எது', 'எந்த நாட்டின் இளைஞர்களுக்காக சுவர்ண ஜெயந்தி உதவி தொகை திட்டத்தை இந்திய பிரதமர் தொடங்கி வைத்துள்ளார்', 'உலகின் முதல் கப்பல் சுரங்கப்பாதை கட்டப்படுகிற நாடு எது', 'பன்னாட்டு விண்வெளி மையத்தில் கண்டறியப்பட்ட புதிய வகை பாக்டீரியத்திற்கு பின்வரும் எந்த இந்திய அறிவியலாளர் பெயர் சூட்டப்பட்டுள்ளது', 'ஆசிய கால்பந்து கூட்டமைப்பின் மகளிர் ஆசிய கோப்பை 2022 போட்டியை நடத்த உள்ள நாடு எது', 'புவி மணி நேர நாளானது ஆண்டுதோறும் எந்த மாதத்தில் கடைசி சனிக்கிழமை அனுசரிக்கப்படுகிறது', 'அண்மையில் தொடங்கி வைக்கப்பட்ட மிதாலி விரைவு என்ற புதிய பயணிகள் ரயில் ஆனது டாக்காவையும் பின்வரும் எந்த இந்திய நகரத்தையும் இனைக்கிறது', 'சாலை போக்குவரத்து அமைச்சகத்தின் அன்மைய தரவுகளின் படி இந்தியாவில் அதிக எண்ணிக்கையிலான பழைய வாகனங்கள் உள்ள மாநிலம் எது', 'மத்திய தகவல் ஆணையத்தின் ஆண்டு அறிக்கையின்படி அதிகபட்ச கோரிக்கைகளை நிராகரித்த மத்திய அமைச்சகம் எது', '“சாந்திஓக்ரோசேனா-2021” என்பது இந்தியாவிற்கும் எந்த நாட்டிற்கும் இடையிலான ஒரு கூட்டு ராணுவ பயிற்சி ஆகும்', '“வஜ்ர பிரகார்-2021” என்பது இந்தியாவின் சிறப்பு படைக்கும் வேறு எந்த நாட்டிற்கும் இடையே நடத்தப்படும் ராணுவ பயிற்சி ஆகும்', '“ஆனந்தம்: மகிழ்ச்சிக்கான மையம்” திறக்கப்பட்டு உள்ள நிறுவனம் எது', '2020ஆம் ஆண்டில் ஆக்ஸ்போர்டு ஹிந்தி சொல்லாக தெரிவு செய்யப்பட்ட சொல்லியது', '“ஆசியா மற்றும் பசிபிக்கில் 2021”இல் “பொருளாதார மற்றும் சமூக ஆய்வினை” வெளியிட்டு 2021-2022ஆம் ஆண்டில் இந்தியாவின் வளர்ச்சியை7% என மதிப்பிட்ட நிறுவனம் எது', 'அடுத்த ஐந்து ஆண்டுகளுக்கு நிர்ணயிக்கப் பட்டுள்ள புதிய வகை பணவீக்க இலக்கு சதவீதம் எது', 'NITI ஆயோக் தொடங்கிய “AIM – PRIME” திட்டத்தின் நோக்கம் என்ன', '(1-1/3) (1- 1/4) (1- 1/5)……..(1- 1/100)ன் மதிப்பை காண்க', '3+4[4-{13-4(7+2)+6}+9] ன் மதிப்பு யாது', '© என்ற செயலியானது a©b = √a²+b² என வரையறுக்கப்படுகிறது. எனில் (3©4)©5) ன் மதிப்பு', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'What is the square root of 289 X^12 Y^6 Z^14', '8^m   =  32  then m is ', 'The value of (0.00243)^2/5  +  (0.0256)^3/4', '', '', '', '', '', '', '', '', '']

a = ['A)\t321 கிமு', 'A)\tகுஷானர்கள்', 'A)\tகாணபத்தியம்', 'A)\tசோழர்கள்', 'A)\tமுத்ரா ராட்சஸம்', 'A)\tபாஹியான்',
     'A)\tஅஷ்டசாஸ்திரம்', 'A)\tபிர்கா', 'A)\tகுப்தர்', 'A)\t1', 'A)\t12', 'A)\tதட்சீலம்', 'A)\tபராபர்', 'A)\tஅலகாபாத்',
     'A)\tசிங்கம்', 'A)\tஎருது ', 'A)\tஎருது ', 'A)\tஎருது', 'A)\tசிங்கம்', 'A)\t3', 'A)\tகனிஷ்கர்', 'A)\tசாரநாத்',
     'A)\tஸ்தூபி', 'A)\tவிகாரம்', 'A)\tபள்ளி', 'A)\tகிரேக்க சிற்பக்கலை', 'A)\tபாலி', 'A)\tபிராகிருதம்',
     'A)\tஅஷ்டத்யாயி', 'A)\tசிரவணபெலகுலா', 'A)\tசீனம்', 'A)\tசீனம்', 'A)\tமஹாயனம்', 'A)\tஉபகுப்தர்', 'A)\tஇலங்கை',
     'A)\t1', 'A)\tதுறவறம்', 'A)\tசந்திர பாஸ்டி', 'A)\tபத்ரபாகு', 'A)\tரூபயா', 'A)\tநிஷ்கா', 'A)\tஜிடால்',
     'A)\tதாமிரலிப்தி', 'A)\tகௌசம்பி', 'A)\tபோர்\u200c படை', 'A)\tஉஜ்ஜயினி', 'A)\tபிளினி',
     'A)\tஆயுதத் தயாரிப்பு மற்றும் அணிகலன் தயாரிப்பு', 'A)\tசமணப்பள்ளி', 'A)\tதட்சசீலம் ', 'A)\tதண்டகர்', 'A)\tபலி',
     'A)\tபஞ்சா ', 'A)\t325கிமு', 'A)\tதர்மஸ்தானியம்', 'A)\t மெகஸ்தனிஸ்', 'A)\tமுக்தர்', 'A)\tகிராம நிர்வாக அதிகாரிகள்',
     'A)\t2', 'A)\tமத்தியஸ்தர்கள்', 'A)\tதுர்கா பாலா', 'A)\tபிரதிஹாரா', 'A)\tஆண் காவல் அதிகாரி', 'A)\tபௌர்',
     'A)\tஸ்தானியம்', 'A)\t7,6', 'A)\tநாணயதர்சிகா', 'A)\tசேனாபதி', 'A)1872', 'A)1872', 'A)1872', 'A) உத்திரப்பிரதேசம்',
     'A)உத்திரபிரதேசம்', 'A)117', 'A)ஒளிப்படவியல்', 'A)5846 Km', 'A)1993', 'A) பெங்களூரு', 'A) அகமதாபாத்', 'A)18',
     'A) சதாப்தி', 'A)1921', 'A) பிறப்பு விகிதம்', 'A)A37', 'A)29.5%', 'A)  A) 1 B) 3 C) 4 D) 2 ',
     'A) இந்தியா----80.04%', 'A)கேரளா', 'A) கேரளா', 'A) தமிழ்நாடு', 'A) தமிழ்நாடு', 'A)  A) 1 B) 3 C) 4 D) 2 ', 'A)377',
     'A) அமர்த்தியா சென்', 'A) மக்கள் தொகை போக்குகள்,ஆரோக்கியம் வெளிப்பாடு', 'A) ஆரோக்கியம்',
     'A)  A) 1 B) 3 C) 4 D) 2 ', 'A)56,03,293', 'A)39,35,337', 'A)NH47 A', 'A)NH47 A', 'A)39,35,337', 'A)39,35,337',
     'A)39,35,337', 'A)1960', 'A)1960', 'A) பஞ்சாப்', 'A) புதுடெல்லி', 'A)1960', 'A)  A) 1 B) 3 C) 4 D) 2 ', 'A) கேரளா',
     'A) கேரளா', 'A)3', 'A)18', 'A)1952', 'A)1952', 'A) டெல்லி', 'A)  A) 1 B) 3 C) 4 D) 2 ', 'A)5',
     'A) இந்தியாவின் மிக அதிவேக ரயில் ----வண்டி த்திமண்', 'A)1952', 'A) மகாராஷ்டிரா', 'A) வடமேற்கு',
     'A) கொல்கத்தா மற்றும் சென்னை', 'A) கொல்கத்தா', 'A)500', 'A) பிஹர்', 'A) நீர்வழி போக்குவரத்து', 'A)1987',
     'A)  A) 1 B) 3 C) 4 D) 2 ', 'A) கொல்கத்தா ,ஹால்தியா மற்றும் விசாகப்பட்டினம்', 'A) காண்ட்லா மற்றும் மும்பை',
     'A)  A) 1 B) 3 C) 4 D) 2 ', 'A)2', 'A)1987', 'A)1987', 'A)19', 'A)1995', 'A)1995', 'A)1995', 'A) கராச்சி',
     'A)1995', 'A)1936', 'A)1936', 'A)1936', 'A)5', 'A)1936', 'A)1 A', 'A)  A) 1 B) 3 C) 4 D) 2 ', 'A)39.79%',
     'A) மார்ச் 01 ', 'A) இந்தியா ', 'A) புனே பன்னாட்டு மையம் ', 'A) வானிலிருந்து தாக்கும் ஏவுகணை ',
     'A) சொத்து மேலாண்மை தளம்  ', 'A) வீட்டுவசதி & நகர்ப்புற வறுமை ஒழிப்பு அமைச்சகம்  ', 'A) ADB ', 'A) வியாழன் ',
     'A) சென்னை ', 'A) மார்ச்  02', 'A) மார்ச் 01 ', 'A) தமிழ்நாடு ', 'A) தமிழ்நாடு  ', 'A) இந்திய வான்படை ',
     'A) பிரான்ஸ் ', 'A) தமிழ்நாடு ', 'A) காங்கோ ', 'A) அஸ்ஸாம் ', 'A) சென்னை ', 'A) A ஆனவர் C-ஐ விடப் பெரியவர் ',
     'A) சரி ', 'A) A', 'A) 55 years', 'A) 16', 'A) 40 ஆண்டுகள், 10 ஆண்டுகள் ', 'A) 12 ', 'A) 28:23 ', 'A) 75 ஆண்டுகள்',
     'A) 12', 'A) 2', 'A) 2 மடங்கு', 'A) 12 ஆண்டுகள்', 'A) 12 ', 'A) 24 ', 'A) 24 ', 'A) 14 ', 'A) 14 ', 'A) 12',
     'A) 21.5 ', 'A) 20, 32, 40 ', 'A) 30 ', 'A) 12', 'A) F மற்றும் A ', 'A) சுனிதா', 'A) 5', 'A) 18, 9. ', 'A) 5:4',
     'A) 60, 30 ', 'A) 12 வருடங்கள்']

b = ['B)\t322 கிமு', 'B)\tமௌரியர்கள்', 'B)\tஆசிவகம்', 'B)\tபல்லவர்கள்', 'B)\tதேவி சந்திரகுப்தம்', 'B)\tமெகஸ்தனிஸ்',
     'B)\tஅர்த்தசாஸ்திரம்', 'B)\tஜமின்தாரி', 'B)\tசாளுக்கியர்', 'B)\t5', 'B)\t11', 'B)\tஉஜ்ஜயினி', 'B)\t அஜந்தா',
     'B)\tபாக்', 'B)\tவெள்ளை தாமரை', 'B)\tசிங்கம்', 'B)\tசிங்கம்', 'B)\tசக்கரம்', 'B)\tயானை', 'B)\t13', 'B)\tஅசோகர்',
     'B)\tவைசாலி', 'B)\tவிகாரம்', 'B)\tமடாலயம்', 'B)\tதூண்கள்', 'B)\tமௌரிய சிற்பக்கலை', 'B)\tசமஸ்கிருதம்',
     'B)\tசமஸ்கிருதம்', 'B)\tவியாக்கரணம்', 'B)\tபாடலிபுத்திரம்', 'B)\tஇலங்கை', 'B)\tஇலங்கை', 'B)\t பீடகம்',
     'B)\tபத்ரபாகு', 'B)\tதிபெத்', 'B)\t7', 'B)\tசல்லேகனம்', 'B)\tசப்த புரி', 'B)\tஜீன சேனா', 'B)\tகங்கா', 'B)\tபானா',
     'B)\tஅனா', 'B)\tபிரிதிலிப்தி', 'B)\tதட்சீலம்', 'B)\tஉளவுப்\u200cபிரிவு', 'B)\tதட்சசீலம்', 'B)\tபாணிணி',
     'B)\tகைத்தொழில் மற்றும் மட்பாண்ட உற்பத்தி', 'B)\tவைணவ கோயில்கள்', 'B)\tநாளந்தா', 'B)\tசலிசா', 'B)\tகலி',
     'B)\tபாகா', 'B)\t321கிமு', 'B)\tகண்டக ஸ்தானியம்', 'B)\tபிளினி', 'B)\tயுக்தர்', 'B)\tமாகாண நிர்வாக அதிகாரிகள்',
     'B)\t7', 'B)\tமகா மாவீரர்கள்', 'B)\tஅந்த பாலா', 'B)\tசன்னி தத்தா', 'B)\tபெண் காவல் அதிகாரி', 'B)\tபிரவுர்',
     'B)\tஸ்தானிகர்', 'B)\t6,5', 'B)\tநிஷ்கதர்சிகா', 'B)\tபன்யதக்ஷா', 'B)1881', 'B)1881', 'B)1881', 'B)மகாராஷ்டிரா',
     'B)சிக்கிம்', 'B)325', 'B)மக்கள் இயல்', 'B)5847 Km', 'B)1994', 'B)சென்னை', 'B) கராச்சி', 'B)14', 'B)ராஜ்தானி',
     'B)1951', 'B) இறப்பு விகிதம்', 'B)45', 'B)8%', 'B)  A) 2 B) 4 C) 3 D) 1 ', 'B) இந்தியா ஆண்கள்----82.14%',
     'B) லட்சத்தீவுகள்', 'B) லட்சத்தீவுகள்', 'B) கோவா', 'B) கோவா', 'B)  A) 2 B) 4 C) 3 D) 1 ', 'B)350',
     'B) ஜவஹர்லால் நேரு', 'B) கல்வி சாதனைகள் மற்றும் தேசிய வருமானம்', 'B) கல்வி', 'B)  A) 2 B) 4 C) 3 D) 1 ',
     'B)65,03,293', 'B)5,61,940', 'B)NH7', 'B)NH7', 'B)5,61,940', 'B)5,61,940', 'B)5,61,940', 'B)1995', 'B)1995',
     'B) குஜராத்', 'B) கொல்கத்தா', 'B)1999', 'B)  A) 2 B) 4 C) 3 D) 1 ', 'B) ஜம்மு காஷ்மீர்', 'B) ஜம்மு காஷ்மீர்',
     'B)5', 'B)13', 'B)1853', 'B)1853', 'B) கொல்கத்தா', 'B)  A) 2 B) 4 C) 3 D) 1 ', 'B)6',
     'B) இதன் வேகம் 160 கிலோமீட்டர்', 'B)1853', 'B) கர்நாடகா', 'B) கொங்கன் ரயில்வே', 'B) புதுடெல்லி மற்றும் மும்பை',
     'B) சென்னை', 'B)507', 'B) ராஜஸ்தான்', 'B) குழாய் வழிப் போக்குவரத்து', 'B)1986', 'B)  A) 2 B) 4 C) 3 D) 1 ',
     'B) தூத்துக்குடி ,சென்னை, எண்ணூர்', 'B) நவ சேவா மற்றும் கொச்சின்', 'B)  A) 2 B) 1 C) 4 D) 3', 'B)16', 'B)1986',
     'B)1986', 'B)16', 'B)2007', 'B)2007', 'B)1857', 'B) லாகூர்', 'B)2007', 'B)1957', 'B)1957', 'B)1957', 'B)3',
     'B)1957', 'B)1 B', 'B)  A) 2 B) 3 C) 4 D) 1 ', 'B)53.25%', 'B) மார்ச் 02 ', 'B) ஜப்பான் ', 'B) ஐஐடி - மெட்ராஸ் ',
     'B) தரையிலிருந்து தாக்கும் ஏவுகணை ', 'B) ஆவணக்களஞ்சியம்', 'B) உள்துறை அமைச்சகம் ', 'B) உலக வங்கி ', 'B) வெள்ளி ',
     'B) கொச்சின் ', 'B) மார்ச் 01', 'B) மார்ச் 02 ', 'B) கேரளா ', 'B) கேரளா ', 'B) இந்திய இராணுவம் ', 'B) பிரேஸில்  ',
     'B) கேரளா ', 'B) கானா  ', 'B) சிக்கிம் ', 'B) கொச்சின் ', 'B) D ஆனவர் Cஐ விடப் பெரியவர் ', 'B) தவறு', 'B) B',
     'B) 45 years ', 'B) 24  ', 'B) 41 ஆண்டுகள், 9 ஆண்டுகள்', 'B) 10 ', 'B) 20:17', 'B) 80 ஆண்டுகள் ', 'B) 14 ', 'B) 4',
     'B) 4 மடங்கு', 'B) 10 ஆண்டுகள் ', 'B) 10 ', 'B) 14 ', 'B) 14 ', 'B) 16', 'B) 16', 'B) 21 ', 'B) 22.5 ',
     'B) 12, 24, 32 ', 'B) 35', 'B) 16', 'B) D மற்றும் F', 'B) லதா ', 'B) 7  ', 'B) 14, 7 ', 'B) 10:7 ', 'B) 40, 20  ',
     'B) 14 வருடங்கள் ']

c = ['C)\t320 கிபி', 'C)\tபாண்டியர்கள்', 'C)\tபௌத்தம்', 'C)\tபாண்டியர்கள்', 'C)\tகல்பசுத்திரம்', 'C)\tகௌடில்யர்',
     'C)\tவியாகரணம்', 'C)\tராயத்வாரி', 'C)\tராஷ்டிரகூடர்', 'C)\t7', 'C)\t7', 'C)\tதோசாலி', 'C)\tஎல்லோரா', 'C)\tசாரநாத்',
     'C)\tவெள்ளை காளை', 'C)\tயானை ', 'C)\tயானை', 'C)\tஸ்தூபி', 'C)\tபோதிமரம்', 'C)\t7', 'C)\tசதகர்னி',
     'C)\tஅனுராதபுரம்', 'C)\tசைத்தியம்', 'C)\tபள்ளி ', 'C)\tஸ்தூபிகள்', 'C)\tகாந்தாரக் கலை', 'C)\tநாகரி', 'C)\tதமிழ்',
     'C)\tசூத்திர விருத்தி', 'C)\tசப்த புரி', 'C)\tநேபாளம்', 'C)\tநேபாளம்', 'C)\tதீபவம்சம்', 'C)\tமோகலிபுத்த திசா',
     'C)\tநேபாளம்', 'C)\t3', 'C)\tஅத்வைதம்', 'C)\tசரவெணபெலகுலா', 'C)\tபிங்கலி', 'C)\tசுவர்ணம்', 'C)\tகர்சபனா',
     'C)\tகர்சபனா', 'C)\tஎலிபெண்டா', 'C)\tபாடலிபுத்திரம்', 'C)\tவரி\u200c குழு', 'C)\tகௌசம்பி', 'C)\tஆர்ரியன்',
     'C)\tநாணய தயாரிப்பு', 'C)\tசைவ வைப்புத் தலங்கள்', 'C)\tவிக்கரமசீலா', 'C)\tகுதபுருஷர்', 'C)\tபாகா', 'C)\tவாகா',
     'C)\t324கிமு', 'C)\tகண்டக சோதனா', 'C)\tயுவான் சுவாங்', 'C)\t கிராமினி', 'C)\tஅரசரின் ஆலோசனைக்குழு', 'C)\t4',
     'C)\tமகா மாதிரர்கள்', 'C)\tமகா மாத்திரர்', 'C)\tநியாயதிஷ்', 'C)\tஎல்லைக் காவல் அதிகாரி', 'C)\tமத்தியார்',
     'C)\tஸ்தானம்', 'C)\t7,8', 'C)\tதிடிகதர்சிகா', 'C)\tஅகஷபாடலா', 'C)2001', 'C)2001', 'C)2001', 'C) பீகார்',
     'C)டெல்லி', 'C)382', 'C)ஆடற்கலையில்', 'C)5849 Km', 'C)1996', 'C)புதுடெல்லி', 'C)புனே', 'C)12', 'C) காத்திமண்',
     'C)1961', 'C) இடப்பெயர்வு', 'C)48', 'C)37.5%', 'C)  A) 3 B) 4 C) 2 D) 1   ', 'C) இந்தியா பெண்கள்----65.46%',
     'C) பீகார்', 'C) பீகார்', 'C) ஹிமாச்சல் பிரதேஷ்', 'C) ஹிமாச்சல் பிரதேஷ்', 'C)  A) 2 B) 4 C) 1 D) 3', 'C)397',
     'C) மெஹபூப் உல் ஹக்', 'C) வள கூட்டமைப்பு மற்றும் தொழில் மற்றும் வேலை வாய்ப்பு', 'C) வருமானம்',
     'C)  A) 3 B) 1 C) 4 D) 2  ', 'C)45,03,293', 'C)1,01,011', 'C)NH1', 'C)NH1', 'C)1,01,011', 'C)1,01,011',
     'C)1,01,011', 'C)1952', 'C)1952', 'C) சண்டிகர்', 'C) சென்னை மற்றும் மும்பை', 'C)1952', 'C)  A) 3 B) 1 C) 4 D) 2  ',
     'C) குஜராத்', 'C) குஜராத்', 'C)2', 'C)11', 'C)1925', 'C)1925', 'C) மும்பை', 'C)  A) 3 B) 1 C) 4 D) 2  ', 'C)3',
     'C) புதுடெல்லி யையும் ஆதரவையும் 200 கிலோமீட்டர் தொலைவை நூற்றி ஐந்து நிமிடங்களில் கடக்கிறது', 'C)1998',
     'C) மேற்கூறிய இரண்டும் சரியானவை', 'C) மேற்கு ரயில்வே', 'C) பெங்களூர்,கொச்சின்,ஹரியானா மற்றும் ஜெய்ப்பூர்',
     'C) மும்பை', 'C)407', 'C) மேகாலயா', 'C) சாலைப்போக்குவரத்து', 'C)1918', 'C)  A) 3 B) 1 C) 4 D) 2  ', 'C) பாரதீப்',
     'C) மர்மகோவா,நியூ மங்களூர்', 'C)  A) 3 B) 1 C) 4 D) 2  ', 'C)8', 'C)1918', 'C)1918', 'C)11', 'C)1975', 'C)1975',
     'C)1975', 'C) கொல்கத்தா', 'C)1975', 'C)1923', 'C)1923', 'C)1923', 'C)2', 'C)1923', 'C)1 C',
     'C)  A) 3 B) 1 C) 4 D) 2  ', 'C)25.51%', 'C) மார்ச் 03 ', 'C) மாண்டினீக்ரோ  ', 'C) ஐஐம் - ஆமதாபாத் ',
     'C) கண்டம் விட்டு கண்டம் பாயும் ஏவுகணை', 'C) சமூக ஊடகம் ', 'C) புவி அறிவியல் அமைச்சகம்', 'C) AIIB ',
     'C) செவ்வாய்  ', 'C) மும்பை ', 'C) மார்ச் 03', 'C) மார்ச் 03  ', 'C) கர்நாடகா ', 'C) கர்நாடகா ',
     'C) இந்திய கடலோரக் காவல்படை ', 'C) பின்லாந்து ', 'C) கர்நாடகா ', 'C) சூடான் ', 'C) அருணாச்சல பிரதேசம்  ',
     'C) மும்பை ', 'C) A ஆனவர் B-ஐ விடப் பெரியவர் ', 'C) முடிவானது அல்ல', 'C) C', 'C) 35 years', 'C) 12',
     'C) 38 ஆண்டுகள், 12 ஆண்டுகள் ', 'C) 14 ', 'C) 26:21 ', 'C) 60 ஆண்டுகள் ', 'C) 16 ', 'C) 6', 'C) 1 மடங்கு',
     'C) 16 ஆண்டுகள்', 'C) 14 ', 'C) 18 ', 'C) 18 ', 'C) 18 ', 'C) 18', 'C) 15', 'C) 24.5 ', 'C) 16, 28, 36 ', 'C) 40',
     'C) 14', 'C) B மற்றும் F', 'C) பிந்து', 'C) 9', 'C) 16, 8 ', 'C) 10:8', 'C) 58, 29', 'C) 18 வருடங்கள்']

d = ['D)\t550  கிபி', 'D)\tகுப்தர்கள்', 'D)\tசமணம்', 'D)\tகளப்பிரர்', 'D)\tஅஷ்டாங்க சம்கிரஹம்', 'D)\tபிளினி',
     'D)\tஇண்டிகா', 'D)\tமன்சப்தாரி', 'D)\tகுஷானர்', 'D)\t12', 'D)\t8', 'D)\tராஜகிருகம் ', 'D)\tகாலா',
     'D)\tஅனுராதபுரம்', 'D)\tவெள்ளை யானை', 'D)\tகுதிரை', 'D)\tகுதிரை', 'D)\tசிங்கம்', 'D)\tதர்மச்சக்கரம்', 'D)\t14',
     'D)\tபிந்துசாரர்', 'D)\tதோசாலி', 'D)\tபள்ளி', 'D)\tசைத்தியம்', 'D)\tவிகாரம்', 'D)\tநகரக் கலை',
     'D)\tபிராகிருத மொழி', 'D)\tதிராவிட மொழி', 'D)\tபீடகம்', 'D)\tசந்திர பாஷ்டி', 'D)\tதிபெத்', 'D)\tதிபெத்',
     'D)\tமகாவம்சம்', 'D)\tஅனுலா', 'D)\tசீனம்', 'D)\t13', 'D)\tதிக்கஜம்', 'D)\tஅயோத்தி', 'D)\t பார்சவர்', 'D)\t நிஷ்கா',
     'D)\tஜிடால்', 'D)\tபானா', 'D)\tதோசாலி', 'D)\tஇவையனைத்தும்', 'D)\tவணிகக் குழு', 'D)\tசோட்டா நாக்பூர்',
     'D)\tமெகஸ்தனிஸ்', 'D)\tஇவற்றுள் ஏதுமில்லை', 'D)\tபௌத்த விகாரங்கள்', 'D)\tஏதுமில்லை', 'D)\tஏதுமில்லை', 'D)\tபஞ்சா',
     'D)\tசாகா', 'D)\t326கிமு', 'D)\tஏதுமில்லை', 'D)\tகௌடில்யர்', 'D)\tகோபன்', 'D)\tநகர நிர்வாக தலைமை', 'D)\t5',
     'D)\tஉபரிகர்கள்', 'D)\tசன்னி தத்தா', 'D)\tசம்ஹர்தர்', 'D)\tஅரண்மனை சோதனையாளர்', 'D)\tவிசாரகர்', 'D)\tஏதுமில்லை',
     'D)\t9,8', 'D)\tரூபதர்சிகா', 'D)\tஆயுதகரதக்ஷா', 'D)2011', 'D)2011', 'D)2011', 'D) மேற்கு வங்கம்',
     'D)அருணாச்சலப் பிரதேசம்', 'D)555', 'D)மக்களடர்த்தி', 'D)5800 Km', 'D)1995', 'D)ஹைதராபாத்', 'D) கொல்கத்தா', 'D)10',
     'D) சார்மினார்', 'D)2011', 'D) அனைத்தும் சரியானவை', 'D)52', 'D)62.5%', 'D)  A) 3 B) 4 C) 2 D) 1 ',
     'D) ஆண் பெண் வித்தியாசம்----16.68%', 'D) தமிழ்நாடு', 'D) தமிழ்நாடு', 'D) மகாராஷ்டிரா', 'D) கேரளா',
     'D)  A) 3 B) 4 C) 2 D) 1 ', 'D)400', 'D) அம்பேத்கர்', 'D) அனைத்தும் சரியானவை', 'D) அனைத்தும் சரியானவை',
     'D)  A) 3 B) 4 C) 2 D) 1 ', 'D)60,03,293', 'D)1,76,166', 'D)NH2', 'D)NH2', 'D)1,76,166', 'D)1,76,166',
     'D)1,76,166', 'D)1925', 'D)1925', 'D) ஜம்மு காஷ்மீர்', 'D) அனைத்தும் சரியானவை', 'D)1925',
     'D)  A) 3 B) 4 C) 2 D) 1 ', 'D) அருணாச்சல் பிரதேசம்', 'D) அருணாச்சல் பிரதேசம்', 'D)7', 'D)9', 'D)1953', 'D)1953',
     'D) சென்னை', 'D)  A) 3 B) 4 C) 2 D) 1 ', 'D)7', 'D) அனைத்தும் சரியானவை', 'D)1953', 'D) மேற்கூறிய எதுவும் இல்லை',
     'D) கிழக்கு ரயில்வே', 'D) அனைத்தும்', 'D) கொச்சின்', 'D)307', 'D) அருணாச்சல் பிரதேசம்', 'D) ரயில் போக்குவரத்து',
     'D)1953', 'D)  A) 4 B) 3 C) 1 D) 2', 'D) அனைத்தும் சரியானவை', 'D) அனைத்தும் சரியானவை', 'D)  A) 4 B) 3 C) 1 D) 2',
     'D)4', 'D)1953', 'D)1953', 'D)8', 'D)1972', 'D)1972', 'D)1972', 'D)டெல்கி', 'D)1972', 'D)1983', 'D)1983', 'D)1983',
     'D)6', 'D)1983', 'D)1 D', 'D)  A) 3 B) 4 C) 2 D) 1 ', 'D)75.23%', 'D) மார்ச் 04', 'D) இத்தாலி', 'D) BITS பிலானி',
     'D) தரையிலிருந்து வானுக்குத் தாக்கும் ஏவுகணை', 'D) செய்தியிடல் செயலி ', 'D) எரிசக்தி அமைச்சகம்',
     'D) புதிய வளர்ச்சி வங்கி', 'D) புதன்', 'D) கொல்கத்தா', 'D) மார்ச் 04', 'D) மார்ச் 04', 'D) தெலங்கானா',
     'D) உத்தர பிரதேசம்', 'D) இந்தியக் கடற்படை', 'D) பிலிப்பைன்ஸ்', 'D) தெலங்கானா', 'D) எத்தியோப்பியா',
     'D) ஹிமாச்சல பிரதேசம்', 'D) மெய்நிகர் முறையில்', 'D) B-யும் D-யும் சமவயதுடையவர்கள்', 'D) முடிவானது', 'D) D',
     'D) 25 years', 'D) 30 ', 'D) 42 ஆண்டுகள், 8 ஆண்டுகள்', 'D) 8', 'D) 30:23', 'D) 85 ஆண்டுகள்', 'D) 10', 'D) 5',
     'D) 3 மடங்கு', 'D) 14 ஆண்டுகள்', 'D) 8', 'D) 22', 'D) 22', 'D) 20', 'D) 20', 'D) 18', 'D) 26.5',
     'D) மேற்கண்ட எதுவுமில்லை', 'D) 45', 'D) 28', 'D) F மற்றும் C', 'D) ராஜன்', 'D) 10', 'D) 12, 6', 'D) 4:3',
     'D) 50, 25 ', 'D) 20 வருடங்கள்']

correct_answer = ['A)\t321 கிமு', 'D)\tகுப்தர்கள்', 'A)\tகாணபத்தியம்', 'C)\tபாண்டியர்கள்', 'A)\tமுத்ர ராட்சஸம்',
                  'B)\tமெகஸ்தனிஸ்', 'A)\tஅஷ்டசாஸ்திரம்', 'A)\tபிர்கா', 'D)\tகுஷானர்', 'C)\t7', 'A)\t12',
                  'D)\tராஜகிருகம்', 'A)\tபராபர்', 'C)\tசாரநாத்', 'D)\tவெள்ளை யானை', 'A)\tஎருது', 'D)\tகுதிரை',
                  'D)\tசிங்கம்', 'D)\tதர்மச்சக்கரம்', 'C)\t7', 'B)\tஅசோகர்', 'C)\tஅனுராதபுரம்', 'B)\tவிகாரம்',
                  'D)\tசைத்தியம்', 'C)\tஸ்தூபிகள்', 'C)\tகாந்தாரக் கலை', 'B)\tசமஸ்கிருதம்', 'A)\tபிராகிருதம்',
                  'B)\tவியாக்கரணம்', 'D)\tசந்திர பாஷ்டி', 'A)\tசீனம்', 'B)\tஇலங்கை', 'C)\tதீபவம்சம்',
                  'C)\tமோகலிபுத்த திசா', 'A)\tஇலங்கை', 'D)\t13', 'B)\tசல்லேகனம்', 'C)\tசரவெணபெலகுலா', 'A)\tபத்ரபாகு',
                  'D)நிஷ்கா', 'B)\tபானா', 'C)\tகர்சபனா', 'A)\tதாமிரலிப்தி', 'A)\tகௌசம்பி', 'D)\tவணிகக் குழு',
                  'D)\tசோட்டா நாக்பூர்', 'A)\tபிளினி', 'A)\tஆயுதத் தயாரிப்பு மற்றும் அணிகலன் தயாரிப்பு',
                  'D)\tபௌத்த விகாரங்கள்', 'A)\tதட்சசீலம்', 'C)\tகுதபுருஷர்', 'A)\tபலி', 'B)\tபாகா', 'D)\t326கிமு',
                  'C)\tகண்டக சோதனா', 'B)\tபிளினி', 'D)\tகோபன்', 'D)\tநகர நிர்வாக தலைமை', 'B)\t7', 'C)\tமகா மாதிரர்கள்',
                  'D)\tசன்னி தத்தா', 'D)\tசம்ஹர்தர்', 'B)\tபெண் காவல் அதிகாரி', 'A)\tபௌர்', 'B)\tஸ்தானிகர்', 'B)\t6,5',
                  'D)\tரூபதர்சிகா', 'D)\tஆயுதகரதக்ஷா', 'A)1872', 'B)1881', 'D)2011', 'A) உத்திரப்பிரதேசம்',
                  'B)சிக்கிம்', 'C)382', 'B)மக்கள் இயல்', 'A)5846 Km', 'D)1995', 'D)ஹைதராபாத்', 'B) கராச்சி', 'A)18',
                  'C) காத்திமண்', 'A)1921', 'D) அனைத்தும் சரியானவை', 'B)45', 'D)62.5%', 'C)  A) 3 B) 4 C) 2 D) 1   ',
                  'A) இந்தியா----80.04%', 'A)கேரளா', 'C) பீகார்', 'B) கோவா', 'C) ஹிமாச்சல் பிரதேஷ்',
                  'C)  A) 2 B) 4 C) 1 D) 3', 'A)377', 'C) மெஹபூப் உல் ஹக்', 'D) அனைத்தும் சரியானவை',
                  'D) அனைத்தும் சரியானவை', 'C)  A) 3 B) 1 C) 4 D) 2', 'A)56,03,293', 'C)1,01,011', 'B)NH7', 'A)NH47 A',
                  'D)1,76,166', 'B)5,61,940', 'A)39,35,337', 'B)1995', 'A)1960', 'C) சண்டிகர்', 'D) அனைத்தும் சரியானவை',
                  'B)1999', 'C)  A) 3 B) 1 C) 4 D) 2  ', 'A) கேரளா', 'B) ஜம்மு காஷ்மீர்', 'C)2', 'A)18', 'B)1853',
                  'A)1952', 'C) மும்பை', 'C)  A) 3 B) 1 C) 4 D) 2  ', 'B)6', 'D) அனைத்தும் சரியானவை', 'C)1998',
                  'C) மேற்கூறிய இரண்டும் சரியானவை', 'B) கொங்கன் ரயில்வே', 'D) அனைத்தும் ', 'A) கொல்கத்தா', 'B)507',
                  'C) மேகாலயா', 'A) நீர்வழி போக்குவரத்து', 'B)1986', 'D)  A) 4 B) 3 C) 1 D) 2', 'D) அனைத்தும் சரியானவை',
                  'D) அனைத்தும் சரியானவை', 'B) A) 2 B) 1 C) 4 D) 3', 'B)16', 'C)1918', 'D)1953', 'A)19', 'A)1995',
                  'B)2007', 'B)1857', 'A) கராச்சி', 'C)1975', 'C)1923', 'A)1936', 'B)1957', 'C)2\n', 'D)1983', 'B)1 B',
                  'B)  A) 2 B) 3 C) 4 D) 1 ', 'A)39.79%', 'A) மார்ச் 01', 'C) மாண்டினீக்ரோ', 'A) புனே பன்னாட்டு மையம்',
                  'D) தரையிலிருந்து வானுக்குத் தாக்கும் ஏவுகணை', 'A) சொத்து மேலாண்மை தளம்',
                  'A) வீட்டுவசதி & நகர்ப்புற வறுமை ஒழிப்பு அமைச்சகம்', 'C) AIIB', 'C) செவ்வாய்', 'C) மும்பை',
                  'C) மார்ச் 03', 'C) மார்ச் 03', 'B) கேரளா', 'A) தமிழ்நாடு', 'B) இந்திய இராணுவம்', 'B) பிரேஸில்',
                  'C) கர்நாடகா', 'B) கானா', 'C) அருணாச்சல பிரதேசம்', 'D) மெய்நிகர் முறையில்',
                  'A) A ஆனவர் C-ஐ விடப் பெரியவர்', 'B) தவறு', 'D) D', 'B) 45 years', 'C) 12',
                  'D) 42 ஆண்டுகள், 8 ஆண்டுகள்', 'D) 8', 'C) 26:21', 'B) 80 ஆண்டுகள்', 'A) 12', 'B) 4', 'A) 2 மடங்கு',
                  'D) 14 ஆண்டுகள்', 'B) 10', 'A) 24', 'D) 22', 'B) 16', 'D) 20', 'C) 15', 'C) 24.5', 'C) 16, 28, 36',
                  'C) 40', 'C) 14', 'B) D மற்றும் F', 'C) பிந்து', 'A) 5', 'C) 16, 8', 'B) 10:7', 'D) 50, 25',
                  'D) 20 வருடங்கள்']


@app.route("/", methods=["GET", "POST"])
def home():
    warning = request.args.get("warn")

    if current_user.is_authenticated:
        completed = Test22.query.filter_by(examinee_id=current_user.user_id).first()

        if request.args.get("fee"):
            name = request.args.get("name")
            bending = request.args.get("bending")
            logged_in = request.args.get("logged_in")

            return render_template("index.html", fee=True, name=name, bending=bending, logged_in=logged_in,
                                   completed=completed)

        else:
            if completed:
                return render_template("index.html", warning=warning, completed=completed)

            else:
                return render_template("index.html", warning=warning)

    else:
        return render_template("index.html", warning=warning)


@app.route("/register", methods=['GET', 'POST'])
def register():
    form = RegisterForm()
    errors = []

    if form.validate_on_submit():
        hash_and_salted_password = generate_password_hash(
            request.form.get('password'),
            method='pbkdf2:sha256',
            salt_length=8
        )

        new_user = User(
            email=request.form.get('email'),
            username=request.form.get('name'),
            password=hash_and_salted_password,
        )

        if User.query.filter_by(email=request.form.get('email').lower()).first():
            return redirect(url_for('login', msg="You've already been registered. Please Login!"))

        elif User.query.filter_by(username=request.form.get('name')).first():
            errors.append('The username has already been taken')
            return render_template("register.html", errors=errors, form=form)

        else:
            errors.clear()

            if request.form.get('email') in verified_emails:

                db.session.add(new_user)
                db.session.commit()

                login_user(new_user)

                # redirect to the home page with fee details.
                return redirect(url_for('home', fee=True, name=student_mails[request.form.get('email')][0],
                                        bending=student_mails[request.form.get('email')][1]))

            else:
                return redirect(url_for('home', warn=True))

    return render_template("register.html", form=form)


@app.route("/login", methods=['GET', 'POST'])
def login():
    form = LoginForm()
    errors = []

    if form.validate_on_submit():
        email = request.form.get('email')
        password = request.form.get('password')

        # Find user by email entered.
        user = User.query.filter_by(email=email).first()

        if not user:
            errors.append("That email does not exist, please Register and then come back.")
            return render_template("login.html", errors=errors, form=form)

        # Check stored password hash against entered password hashed.
        if check_password_hash(user.password, password):
            login_user(user)
            errors.clear()

            # checking the user's payment details
            # redirect to the home page with fee details.
            return redirect(url_for('home', fee=True, name=student_mails[request.form.get('email')][0],
                                    bending=student_mails[request.form.get('email')][1]))

        else:
            errors.append('Incorrect Password! Try Again')
            return render_template("login.html", errors=errors, form=form)

    msg = request.args.get("msg")
    return render_template("login.html", form=form, errors=errors, msg=msg)


@app.route("/exam", methods=["GET", "POST"])
def exam():
    global attended
    test_no = request.args.get("test_no")
    opentime = exam_sites[test_no][0]
    closetime = exam_sites[test_no][1]

    if test_no == "15":
        attended = Test15.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "16":
            attended = Test16.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "17":
            attended = Test17.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "18":
        attended = Test18.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "19":
        attended = Test19.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "20":
        attended = Test20.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "21":
        attended = Test21.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "22":
        attended = Test22.query.filter_by(examinee_id=current_user.user_id).first()

    # else:
    #     return redirect(url_for("home", warn="Sorry the results are no longer available!"))

    if attended is None:
        return render_template("exam.html", opentime=json.dumps(opentime), closetime=json.dumps(closetime),
                               sl_no=sl_no, ques=ques, a=a, b=b, c=c, d=d, correct_answer=correct_answer,
                               answers=[], test_no=test_no)
    else:
        return redirect(url_for("home", warn="You have already committed this exam. Check the results instead."))


@app.route('/evaluate', methods=["GET", "POST"])
def evaluate():
    global new_examinee
    answers = []
    final_result = []
    marks = 0

    for i in range(0, len(sl_no)):
        user_answer = request.form[f'answers{i}']

        if user_answer is None:
            answers.append("None")

        else:
            answers.append(user_answer)

    for j in range(len(correct_answer)):

        if answers[j].strip() == correct_answer[j].strip():
            marks += 1
            final_result.append("Correct")

        else:
            final_result.append("Wrong")

    # return f"{final_result, answers, correct_answer}"

    st_answers = '#||#'.join(answers)
    f_result = "#||#".join(final_result)

    # return f"{correct_answer, answers}"
    # return f"{[s_answers for s_answers in correct_answer]}"
    # return f"{[s_answers for s_answers in answers]}"
    # return f"{final_result}"

    actual_time = datetime.datetime.now()
    s_time = actual_time.strftime('%Y-%m-%d %H:%M:%S.%f')

    new_examinee = Test22(
        test_author=current_user,
        user_answers=st_answers,
        marks=marks,
        final_result=f_result,
        date=s_time[:-7],
        examinee_name=current_user.username
    )

    db.session.add(new_examinee)
    db.session.commit()

    return redirect(url_for('home', warn="You have successfully completed the exam. Click results to see results."))


@app.route("/result", methods=["GET", "POST"])
def result():
    global answers, final_result, time, marks
    test_no = request.args.get("test_no")

    if test_no == "15":
        attended_student = Test15.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "16":
        attended_student = Test16.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "17":
        attended_student = Test17.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "18":
        attended_student = Test18.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "19":
        attended_student = Test19.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "20":
        attended_student = Test20.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "21":
        attended_student = Test21.query.filter_by(examinee_id=current_user.user_id).first()

    elif test_no == "22":
        attended_student = Test22.query.filter_by(examinee_id=current_user.user_id).first()

        answers = attended_student.user_answers.split('#||#')
        final_result = attended_student.final_result.split('#||#')
        marks = attended_student.marks
        time = attended_student.date

    else:
        return redirect(url_for('home', warn="You did not attend the Test that you had selected!"))

    return render_template("results.html", answers=answers, marks=marks, sl_no=sl_no, ques=ques, a=a, b=b, c=c, d=d,
                           correct_answer=correct_answer, final_result=final_result, time=time)


@app.route("/dashboard")
def dashboard():
    all_record = Test22.query.all()

    return render_template("dashboard.html", all_record=all_record)


@app.route("/change_details", methods=["GET", "POST"])
def change_password():
    form = ChangeDetails()
    errors = []

    if form.validate_on_submit():
        email = request.form.get('email')
        old_password = request.form.get('old_password')
        new_password = request.form.get('new_password')

        user = User.query.filter_by(email=email).first()

        if not user:
            errors.append("That email does not exist, please Register and then come back.")
            return render_template("login.html", errors=errors, form=form)

        # Check stored password hash against entered password hashed.
        if check_password_hash(user.password, old_password):

            if User.query.filter_by(email=email).first():
                old = User.query.filter_by(email=email).first()
                pass_to_update = User.query.get(old.user_id)

                hash_and_salted_password = generate_password_hash(
                    new_password,
                    method='pbkdf2:sha256',
                    salt_length=8
                )

                pass_to_update.password = hash_and_salted_password

                db.session.commit()

                logout_user()
                return redirect(url_for('login', msg="Your password has been changed successfully. "
                                                     "Please Login with your new password."))

        else:
            errors.append("Please check your password.")
            return render_template("change_details.html", form=form, errors=errors)

    return render_template("change_details.html", form=form, errors=errors)


@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('home'))


@app.route("/admission", methods=["GET", "POST"])
def new_admission():
    form = AdmissionForm()

    if form.validate_on_submit():
        new_member = Admission(
            name=form.name.data,
            mobile_number=form.number.data,
            email=form.email.data,
        )

        db.session.add(new_member)
        db.session.commit()

        verification_code = random.randint(2000, 10000)

        with smtplib.SMTP('smtp.gmail.com', 587) as connection:
            connection.starttls()
            connection.login(MY_EMAIL, MY_PASSWORD)
            connection.sendmail(from_addr=MY_EMAIL,
                                to_addrs=request.form.get('email'),
                                msg=f"Subject:WELCOME TO SENA CAREER INSTITUTE\n\nWelcome {request.form.get('name')}!"
                                    f" Happy to see you with us. Thanks for supporting us! Keep rocking! "
                                    f"Here is our Educators' number: 8610642720".encode('utf-8'))

        with smtplib.SMTP('smtp.gmail.com', 587) as connection:
            connection.starttls()
            connection.login(MY_EMAIL, MY_PASSWORD)
            connection.sendmail(from_addr=MY_EMAIL,
                                to_addrs=MY_EMAIL,
                                msg=f"Subject:NEW ADMISSION\n\n{request.form.get('name')} has made an "
                                    f"admission sign up on Sena site Here is details {request.form.get('name')},"
                                    f" {request.form.get('number')}, {request.form.get('email')}!")

        return redirect(url_for('home'))

    return render_template("register.html", form=form, admission=True)


if __name__ == '__main__':
    app.run(debug=True)
